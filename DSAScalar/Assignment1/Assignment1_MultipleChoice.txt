1. Find the number of times below code runs where N is a perfect square

    for i -> 1 to N
    if(i * i == N)
        return i

A). N
B). N/2
C). sqrt(N)     > 
D). logN
Answer: C
Since 'N' is a perfect square, 'i' runs from 1 to sqrt(N) and returns, so number of iterations would be sqrt(N).

2. The sum of n natural numbers is :
A). (n*(n+1))/2     >
B). (n*(n-1))/2
C). (n+1)/2
D). (n*(n+1)*(2*n+1))/6
Answer: A (Basic Formula)

3. How many iterations will take place?

    int func(int n){
        int s = 0;
        for(int i = 1 ; i <= 100 ; i++){ 
            s = s + i;
        }
        return s;
    }

A). 100     >
B). 99
C). 98
D). 101
Answer: A
Since, i iterates 1 -> 100, that means it runs [1, 100] => range is 100 - 1 + 1 = 100.
Because range of [a, b] = b-a+1, since we are including 'a' and 'b'
        range of (a,b) = b-a-1, since we are excluding 'a' and 'b'
        range of [a,b) = b-a, since we are including 'a' and excluding 'b'

4. Find the number of iterations in the following code snippet:

    int ans = 0;
    for (int i = 0; i < n; i++){
        ans += i * i;
    }

A). n^2
B). n   >
C). n-1
D). n+1
Answer: B
Since, range of [a,b) = b-a, since we are including 'a' and excluding 'b'
        => [0, n) = n-0 = n.

5. What will be the total number of iterations in the following code?

    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= i; j++) {
            print(i + j);
        }
    }

A). n^2
B). N
C). n*(n+1) / 2     >
D). n*(n-1) / 2
Answer: C
Since, for each loop of 'i', 'j' runs 'i' times.
    => 1*(1) + 1*(2 loops) + 1*(3 loops) + 1*(4 loops) + ..... + 1*(n loops)
            n loops here since i range is [0, n).
    =  sum of first (n-1) natural numbers.
    =  n*(n+1) / 2