Q1. Find Time Complexity - 4
What is the time complexity of the following code snippet

    int func(int n){
        int s = 0;
        for(int i = 1 ; i*i*i <= n ; i++){
            s = s + i;
        }
        return s;
    }

A). O(n^(1/4))
B). O(n^(1/3))
C). O(n^(1/2))
D). O(n)
Answer: O(n^(1/3))
The condition in for loop says: i^3 <= n => i <= n^(1/3).
    => The loop runs n^(1/3) times.
    => Time Complexity = O(n^(1/3)).

Q2. Time Complexity-i
What is the complexity of the following code snippet ?

    int ans = 0;
    for(int i=0; i<n; i++){
        ans += i*i;
    }
    return ans;

A). O(nlogn)
B). O(n)
C). O(n^2)
D). O(1)
E). None of the above.
Answer: O(n)
The loop runs 'n' times {[0,n) range = n-0 = n }.
    => Time Complexity = O(n)

Q3. Find Time Complexity - 9
What is the time complexity of the following code snippet

    for(int i = 1 ; i <= n ; i++){
        for(int j = 1 ; j <= 3^i ; j++){
            print(i + j);
        }
    }

A). O(n^2)
B). O(nlogn)
C). O(2^n)
D). O(3^n)
Answer: O(3^n)
Outer loop runs 'n' times {[1, n] range = n-1+1 = n}
For each outer loop, inner loop runs 3^i times
    => 1*(3^1) + 1*(3^2) + 1*(3^3) + .... + 1*(3^(n-1)) + 1*(3^n)
    =  [3*((3^n)-1)] / [3-1]  {Since, sum of n terms of a GP is: [a*((r^n)-1)] / [r-1]}
    =  O(3^n) {Ignoring the lower order terms and constant and providing a Big(O) notation}

Q4. Time-Complexity-8
If an algorithm has a time complexity of O(1), then the complexity of it is ?

A). constant
B). polynomial
C). exponential
D). none of the mentioned
Answer: constant
Since, O(1) is constant and it is independent of the value of 'n'.
So, for any larger value of 'n', the code takes the same constant to get executed.

Q5. Time-Complexity-9
If for an algorithm time complexity is given by O(log2n) then complexity will:

A). constant
B). polynomial
C). exponential
D). none of the mentioned
Answer: none of the mentioned
Since, the time complexity is mentioned in log terms, the complexity is logarithmic, which is not mentioned in the options.

Q6. Time-Complexity-10
If an algorithm has a time complexity of O(n), then the complexity of it is ?

A). constant
B). linear
C). exponential
D). none of the mentioned
Answer: linear
Since, the time complexity only depends on n, it means complexity is in linear format when visualized with graph.

Q7. Time-Complexity-12
If for an algorithm time complexity is given by O((3/2)^n) then complexity will:

A). constant
B). quadratic
C). exponential
D). none of the mentioned
Answer: exponential
Since Time complexity is in exponential form when visualized in graph.

Q8. NESTED_CMPL
What is the time, space complexity of following code:

    int a=0, b=0;
    for(i=0; i<N; i++){
        for(j=0; j<N; j++){
            a = a+j;
        }
    }
    for(k=0; k<N; k++){
        b = b+k;
    }

A). O(N*N) time, O(1) space
B). O(N) time, O(N) space
C). O(N) time, O(1) space
D). O(N*N) time, O(N) space
E). O(N*N*N) time, O(1) space
Answer: O(N*N) time, O(1) space
For the first nested loop:
    Outer loop runs N times {[0,N) range = N-0 = N}
    Inner loop runs N times {[0,N) range = N-0 = N}
For the second independent for loop:
    The loop runs N times {[0,N) range = N-0 = N}
Total Time Complexity = [{Outer loop * Inner loop} for a Nested loop] + [Independent loop] 
                      = [N * N] + N
                      = O(N*N)  {Ignoring the lower order terms}
Total Space Complexity is constant, because the memory utilized for the output variables is independent of n. => Space complexity = O(1) in Big(O) notation.

Q9. Time Complexity - M4
Find the Time Complexity of the following function solve :

    public void solve(int N){
        for(int i=0; i<Math.pow(2,N); i++){
            int j = i;
            while(j>0){
                j -= 1;
            }
        }
    }

A). O(N*N)
B). O(2^N)
C). O(N*(2^N))
D). O(3^N)
E). O(4^N)
Answer: O(4^N)
Outer loop runs 2^N times {[0, 2^N) range = 2^N - 0 = 2^N}
Inner loop runs as following for each iteration of i:
    = 1*(0 loop) + 1*(1 loop) + 1*(2 loops) + .... + 1*(2^(N-1) loops)
    = Sum of 2^N natural numbers    {N-1 numbers ~ N numbers}
    = (2^N)*(2^N + 1) / 2
    = [(2^N * 2^N) + 2^N] / 2
    = O(2^N * 2^N) = O(2^(N+N)) = O(4N) in Big(O) notation.

Q10. Find Time Complexity
What will be the time complexity of the above function where n is a positive integer?

    public void function(int n){
        while(n>0){
            n++;
            n-=2;
        }
    }

A). Infinite loop
B). O(n)
C). O(nlogn)
D). O(logn)
E). None of the above
Answer: O(n)
Each iteration is decremented 1 time => Total number of iterations = n.
Total time complexity = O(n)

Q11. Time Complexity-iii
What is the time complexity of the following code snippet?

    for(int i=0; i<n; i++){
        for(int j=i-1; j>=0; j++){
            ans += i+j;
        }
    }

A). O(n)
B). O(n^2)
C). Code will run indefinitely
D). O(1)
E). None of the above
Answer: Code will run indefinitely.
Outer loop runs n times.
Inner loop runs indefinitely as j condition is j>=0 => for i = 1, j values is always positive and loop never terminates for the given condition.
 => Loop runs indefinitely.

Q12. Time Complexity - 8
What is the time complexity of the following code snippet?

    int sum = 0;
    for(int i=0; i<=N; i++){
        for(int j=i; j<=N && j>i; j++){
            sum += i;
        }
    }

A). O(N^2)
B). O(N)
C). O(NlogN)
D). None of these
Answer: O(N)
Outer loop runs N+1 times
Inner loop: For any value of i, inner loop does not execute because j initializes at i but the termination condition is j always greater than i => Loop condition will never be true
 => Inner loop time complexity is O(1).
So, Total time complexity = time complexity of outer loop = O(N).